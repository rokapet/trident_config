#####################################################################
#   Macros for querying the BME sensors
#####################################################################
[gcode_macro QUERY_BME_AMBIENT]
gcode:
    {% set sensor = printer["bme280 ambient"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity))}

[gcode_macro QUERY_BME_CHAMBER]
gcode:
    {% set sensor = printer["bme280 chamber"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n"
        "Humidity: %.2f%%\n"
        "Gas Level: %.2f VOC" % (
            sensor.temperature,
            sensor.pressure,
            sensor.humidity,
            sensor.gas))}


#####################################################################
#   Macros for settings of different print surface types
#####################################################################
[gcode_macro SET_SHEET_PROMPT]
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Sheet selection"
    RESPOND TYPE=command MSG="action:prompt_text Which type of surface you want to print on?"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button Textured PEI|USE_SHEET SHEET=\"'Textured_PEI'\"|primary"
    RESPOND TYPE=command MSG="action:prompt_button Smooth PEI|USE_SHEET SHEET=\"'Smooth_PEI'\"|primary"
    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Close dialog|RESPOND TYPE=command MSG=action:prompt_end"    
    RESPOND TYPE=command MSG="action:prompt_show"

    G4 P10000                       ; Wait a few seconds to make the above choice

[gcode_macro USE_SHEET]
variable_used_surface: 'Nothing'
gcode:
    {% set SHEET = params.SHEET|default('Textured_PEI')|string %}
    SET_GCODE_VARIABLE MACRO=USE_SHEET VARIABLE=used_surface VALUE="{SHEET}"
    M117 Print surface used: {SHEET}

[gcode_macro SHOW_USED_SHEET]
gcode:
    {% set SURFACE = printer["gcode_macro USE_SHEET"].used_surface %}
    M117 Print surface used: {SURFACE}
    
#####################################################################
#   Macro for settings of different filaments
#####################################################################
[gcode_macro SET_FILAMENT]
gcode:
    {% set SURFACE = printer["gcode_macro USE_SHEET"].used_surface %}
    {% set FILAMENT = params.FILAMENT|default('PLA')|string %}

    {% if FILAMENT == 'PLA' %}
      SET_PRESSURE_ADVANCE ADVANCE=0.030 SMOOTH_TIME=0.040     ; PLA on smooth PEI
#      SET_FAN_SPEED FAN=chamber_heater SPEED=0                 ; Stop chamber heater fan
      {% if SURFACE == 'Smooth_PEI' %}
        SET_GCODE_OFFSET Z=0.000                               ; Set Z Offset for PLA on Smoot PEI print surface
      {% elif (SURFACE == 'Textured_PEI') %}
        SET_GCODE_OFFSET Z=0.015                               ; Set Z Offset for PLA on Textured PEI print surface
      {% endif %}
    {% elif (FILAMENT == 'PET') %}
      SET_PRESSURE_ADVANCE ADVANCE=0.050 SMOOTH_TIME=0.040     ; PETG on textured PEI
      SET_GCODE_OFFSET Z=0.000
#      SET_FAN_SPEED FAN=chamber_heater SPEED=0                 ; Stop chamber heater fan
    {% elif (FILAMENT == 'PETG') %}
      SET_PRESSURE_ADVANCE ADVANCE=0.050 SMOOTH_TIME=0.040     ; PETG on textured PEI
      SET_GCODE_OFFSET Z=0.000
#      SET_FAN_SPEED FAN=chamber_heater SPEED=0                 ; Stop chamber heater fan
    {% elif FILAMENT == 'ABS' %}
      SET_PRESSURE_ADVANCE ADVANCE=0.044 SMOOTH_TIME=0.040
#      SET_FAN_SPEED FAN=chamber_heater SPEED=0.5                 ; Start chamber heater fan to help heat soaking
      {% if SURFACE == 'Smooth_PEI' %}
        SET_GCODE_OFFSET Z=0.000                                 ; Set Z Offset for ABS on Textured PEI
      {% elif (SURFACE == 'Textured_PEI') %}
        SET_GCODE_OFFSET Z=-0.005                                ; Set Z Offset for ABS on Textured PEI
      {% endif %}
    {% elif FILAMENT == 'ASA' %}
      SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040
#      SET_FAN_SPEED FAN=chamber_heater SPEED=0.5                 ; Start chamber heater fan to help heat soaking
      {% if SURFACE == 'Smooth_PEI' %}
        SET_GCODE_OFFSET Z=0.000                                 ; Set Z Offset for ASA on Textured PEI
      {% elif (SURFACE == 'Textured_PEI') %}
        SET_GCODE_OFFSET Z=-0.000                                ; Set Z Offset for ASA on Textured PEI
      {% endif %}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE=0.044 SMOOTH_TIME=0.040       ; Default PA values
      SET_GCODE_OFFSET Z=0                                       ; Default Z offset
#      SET_FAN_SPEED FAN=chamber_heater SPEED=0                   ; Stop chamber heater fan
    {% endif %}

#####################################################################
#   Macro for getting all variables and their values - by Andrew Ellis
#####################################################################
[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}


#####################################################################
#   Speed and Acceleration Tuning
#####################################################################
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
